//libraries
#include <dht.h>  //humidity and temperature sensor library
#include <LiquidCrystal.h>  //Display library
#include "RTClib.h"  //library that allows to use the Real Time Clock in the logging shield
#include "SD.h"  //logging library
#include <SPI.h>
#include <Wire.h>   //library that helps with I2C comunication
#include "Arduino.h"   
#include <SoftwareSerial.h>  //library that allows a serial comunication in non-serial pins
#include <stdlib.h>

extern unsigned int __bss_end; //vars to know where the parts of memory (heap and stack) end
extern void *__brkval;
   

/* Pins that the logging shield uses
Digital #13 - SPI clock
Digital #12 - SPI MISO
Digital #11 - SPI MOSI
Digital #10 - SD Card chip select (can cut a trace to re-assign)
SDA connected to A4
SCL connected to A5
*/

//defining pins of arduino-----------------------------------------
#define pinSensor A0
#define pinUnitsButton A1
#define pinLEDBT A2





//Bluetooth---------------------------------------------------------
//defining the bluetooth serial comunication
#define rxPin 9
#define txPin 8
SoftwareSerial serialBT(rxPin, txPin); // RX, TX
//the following 4 lines define the bluetooth comunication
#define startToken '?'
#define endToken ';'
#define delimitToken '&'
#define charTimeout 8
const char endData[8] = "?END;;;";

//the following 6 lines allow the correct reading of BT messages
/*
bool waitingForStartToken = true;
char Character;
String messageBuffer;
String messageList[3];
byte messageCounter = 0;
bool checkList = false;
*/

//#define readingBTMessageDelay 10
//unsigned long readingBTMessageTime;

#define sendFilesListDelay 250
unsigned long sendFilesListTime;     

unsigned long sensorReadingBTTime;
unsigned int sensorReadingBTDelay = 1000;

#define sendingFileDataDelay 250
unsigned long sendingFileDataTime;

bool sendSensorReading = false;  
bool sendFilesList = false;
bool sendFileData = false;


//sensor -----------------------------------------------------------------
dht sensorDHT;



//Logging Shield ---------------------------------------------------------
RTC_DS1307 RTC;  //Real Time Clock object
//DateTime presentTime;
#define ChipSelect 10
File logFile;
File root;
unsigned int loggingToSDDelay = 30000;
unsigned long loggingToSDTime;

#define loggingFileStartDelay 86400 //the amount of seconds in 1 days
unsigned long loggingFileStartTime;  //TENHO QUE TRATAR DISTO

String loggingFileName = "20000000.csv";  //in case there is a problem reading the real file name the arduino will keep saving the readings
String readFileName;




//LCD---------------------------------------------------------------
LiquidCrystal lcd(2,3,4,5,6,7);
#define sensorReadingToDisplayDelay 2000
unsigned long sensorReadingToDisplayTime;




//Temperature units button -------------------------------------------
#define unitsButtonDelay 200
unsigned long unitsButtonTime;


//byte unitsButtonCurrentState;
//byte unitsButtonLastState;
byte unitsCounter = 0;
//float temperatureReading;

//---------------------------------------------------------------------------



void recievingBluetoothInformation();
void executeMessage(String message);
byte getByte (String text, byte textCursor);
void sensorReadingToSD ();
void sendSDFilesList();
void sendSDFileData();
void sendSensorReadingToPhone();
void checkUnitsButton();
void sensorReadingToDisplay();
String readVarsFile(byte listIndex);
unsigned long getLong (String text);



void setup()
{ 
  pinMode(10, OUTPUT);  //making sure that the chip select pin works fine
  pinMode(pinLEDBT, INPUT);
  
  //starting the units button
  pinMode(pinUnitsButton, INPUT_PULLUP);
  //unitsButtonLastState = digitalRead(pinUnitsButton);

  
  //lcd.createChar(0, {grau});
  lcd.begin(16,2, LCD_5x8DOTS);
  
  //defining the BT serial pins and starting the comunication
  pinMode(rxPin,INPUT);
  pinMode(txPin, OUTPUT);
  serialBT.begin(115200);

  
  Serial.begin(74880);
  

  //Prints para RTC e SD card
  if (! RTC.begin()) {
    Serial.println(F("Can't find RTC"));
  }

  //if (! RTC.isrunning()) RTC.adjust(DateTime(F(__DATE__), F(__TIME__))); //when timesetting in RTC is needed, this line should be uncommented 
  
  Serial.print(F("Init SD card"));

  // see if the card is present and can be initialized:
  if (!SD.begin(ChipSelect)) {
    Serial.println(F("Card failed"));
  }
  Serial.println(F("card initzd."));
  Serial.println(F("Stat,\tHmd(%),\tTemp(C)"));

  loggingFileStartTime = RTC.now().unixtime();  //in case there is as error reading the real value

  loggingFileStartTime = getLong(readVarsFile (0));
  loggingFileName = readVarsFile(1);
  loggingToSDDelay = (getByte(readVarsFile(2),0)*1000);

  Serial.println(loggingFileStartTime);
  Serial.println(loggingFileName);
  Serial.println(loggingToSDDelay);

  
}





//-------------------------------------------------------------------------------




void loop()
{  
  recievingBluetoothInformation();

  sensorReadingToSD();

  sendSDFilesList();

  sendSDFileData();

  sendSensorReadingToPhone();

  checkUnitsButton();

  sensorReadingToDisplay();
}




//FUNTIONS####################################################################################################
//-----------------------------------------------------------------------------------------------------------------




void recievingBluetoothInformation()  {

  bool waitingForStartToken = true;
  char Character;
  String messageBuffer;
  String messageList[3];
  byte messageCounter = 0;
  bool checkList = false;

  
  if (serialBT.available()) {
    do {
      checkList = true;
      
      //waiting for start of message
      if (waitingForStartToken) {
        do {
          Character = serialBT.read();
          } while ((Character != startToken) && serialBT.available());
        if (Character == startToken){
          //Serial.println(F("Msg strt"));
          waitingForStartToken = false;
        }
      }
      
      //read bluetooth message
      if (!waitingForStartToken && serialBT.available()) {
        do {
          Character = serialBT.read();
          Serial.println(Character);
          messageBuffer += Character;
          } while ((Character != endToken) && serialBT.available());
    
    
        //verify if the message is completed
        if (Character == endToken) {
          //remove the end token from the messageBuffer
          messageBuffer = messageBuffer.substring(0, messageBuffer.length() - 1);
          Serial.println(messageBuffer);
          messageList[messageCounter] = messageBuffer;
          messageCounter = (messageCounter+1)%3;
          messageBuffer = "";
          waitingForStartToken = true;
          }
        
        //verify if the message is to big for what is expected
        if (messageBuffer.length() > charTimeout) {
          messageBuffer = "";
          messageList[messageCounter] = "Err";
          if messageCounter == 0 {
            messageList[2] = "";
            messageList[0] = "Err";
            serialBT.print("?Err;;;");
            }
          else if (messageCounter == 2) {
           nessageList[2] = "Err";
            }
          messageCounter = (messageCounter+1)%3;
          waitingForStartToken = true;
          }
        
        }
    } while ((serialBT.available()) && (messageList[2] == ""));  //the second term makes sure that the arduino only reads one package at a time
  }
  
  //verify if the information package has readeble messages
  if ((messageList[0] != "") && checkList) {
    checkList = false;
    if ((messageList[0] == messageList[1]) || (messageList[0] == messageList[2])) {
      executeMessage(messageList[0]);
      }
    else if (messageList[1] == messageList[2]) {
      executeMessage(messageList[1]);
      }
    else{
      serialBT.print("?Err;;;");
      Serial.print("Err");
      }
    if ((messageList[1] == "")  && (messageList[2] == "")) {
      serialBT.print("?Err;;;");
      }
  }
}





//----------------------------------------------------------------------------





void executeMessage(String message) {
  byte textCursor;
  //byte LF;
  //byte SF;
  
  if (message.startsWith("AFL")) {
    sendFilesList = true;
    sendFilesListTime = millis();
    }
  
  else if (message.startsWith("FD")) {
    readFileName = "20" + message.substring(2, message.length()) + ".csv";
    Serial.println(readFileName);
    sendFileData = true;
    sendingFileDataTime = millis();
    }
  
  else if (message.startsWith("LF=")) {
    textCursor = 3;
    //LF = getByte(message, textCursor);
    loggingToSDDelay = getByte(message, textCursor)*60*1000;
    String lastTimeStamp = readVarsFile(0);
    loggingFileName = readVarsFile(1);

    SD.remove("VARS.txt");
    logFile = SD.open("VARS.txt", FILE_WRITE);
    if (logFile) {
      logFile.print(lastTimeStamp);
      logFile.print(F(","));
      logFile.print(loggingFileName);
      logFile.print(F(","));
      logFile.print(loggingToSDDelay);
      logFile.print(F("!"));
      if(__brkval == 0x00) Serial.println(SP - (int)&__bss_end);
      else Serial.println(SP - (int)__brkval);   
      } 
    logFile.close();
    
        
    }

  
  else if (message.startsWith("SF=")) {
    textCursor = 3;
    sensorReadingBTTime = millis();
    sensorReadingBTDelay = getByte(message, textCursor)*1000;
    }
  
  else if (message.startsWith("PG=")) {
    textCursor = 3;
    byte num = getByte(message, textCursor);
    if (num == 55) {
      sendSensorReading = true;
      }
    else if (num == 22) {
      sendSensorReading = false;
      }
    }

  serialBT.print("?" + message + ";;;");
  Serial.println("?" + message + ";");
  }



//------------------------------------------------------------------------------------

byte getByte (String text, byte textCursor) {
  byte numero = 0;
  while ((text[textCursor] >= '0') && (text[textCursor] <= '9') && (textCursor < text.length())) {
    numero = (numero*10) + (text[textCursor] - 48);
    textCursor++;
  }
  return numero;
}




//-------------------------------------------------------------------------------------



void sensorReadingToSD () {
  
  if ((unsigned long)(millis() - loggingToSDTime) > loggingToSDDelay) {
    loggingToSDTime = loggingToSDTime + loggingToSDDelay;
    DateTime presentTime = RTC.now();
 
    if ((unsigned long)(presentTime.unixtime() - loggingFileStartTime) > loggingFileStartDelay) {  //checks if one day has already passed to start a new file   
      loggingFileStartTime = loggingFileStartTime + loggingFileStartDelay;  

      
      String loggingFileFrequency = readVarsFile(2);
      
      char loggingFileNameChar[13];
      sprintf(loggingFileNameChar, "%04hhu%02hhu%02hhu.csv", presentTime.year(), presentTime.month(), presentTime.day());
      //Serial.println(RTC.now().unixtime());
  
      loggingFileName = "";
      for (byte x=0; x<13; x++){
        loggingFileName += loggingFileNameChar[x];
      }
      
      //Serial.println(loggingFileName);
      
      SD.remove("VARS.txt");
      logFile = SD.open("VARS.txt", FILE_WRITE);
      if (logFile) {
        logFile.print(presentTime.unixtime());
        logFile.print(F(","));
        logFile.print(loggingFileName);
        logFile.print(F(","));
        logFile.print(loggingFileFrequency);
        logFile.print(F("!"));   
        } 
      logFile.close();
      }

    if (!SD.exists(loggingFileName)) {
      //Serial.print("ABRIU 1a VEZ");
      logFile = SD.open(loggingFileName, FILE_WRITE);
      if (logFile) {
        logFile.println(F("timestamp (s), date (mm/dd),time (hh:mm),temperature (ºC),humidity (%)"));
        logFile.close();        
        }
      }
    else{
      logFile = SD.open(loggingFileName, FILE_WRITE);  
      if (logFile) {
        logFile.print(presentTime.unixtime());
        logFile.print(F(","));
        logFile.print(presentTime.month(), DEC);
        logFile.print(F("/"));
        logFile.print(presentTime.day(), DEC);
        logFile.print(F(","));
        logFile.print(presentTime.hour(), DEC);
        logFile.print(F(":"));
        logFile.print(presentTime.minute(), DEC);
        logFile.print(F(","));
        logFile.print(sensorDHT.temperature, 1);
        logFile.print(F(","));
        logFile.println(sensorDHT.humidity, 1);
        logFile.close();
      }
    }

  }

}

//------------------------------------------------------------------------------------


void sendSDFilesList() {
  if (sendFilesList && ((unsigned long)(millis() - sendFilesListTime) > sendFilesListDelay)) {
    sendFilesListTime = millis() - 150;  //allows to have a smaller delay between files without having to define a variable for de delay
    
    if (!root) {
      root = SD.open("/");
      root.rewindDirectory();
      }
    File entry = root.openNextFile();
    if(!entry) {
      root.close();
      sendFilesList = false;
      Serial.print(F("?END;"));
      serialBT.print(endData);
    } 
    else {
      Serial.print(F("!"));
      String entryName = entry.name();
      if (entryName.length() > 10) {
        entryName = entryName.substring(2, 8);  //ignoring the first 2 digits is fine (and allows simpler BT comunication), considering that this project wont be working in the century 22
        Serial.println("?" + entryName + ";");
        serialBT.print("?" + entryName + ";;;");
        
      }
      entry.close();
    }
  }
}


//---------------------------------------------------------------------------------------------

void sendSDFileData() {

  char Character;
  String messageBuffer;
  
  if (sendFileData && ((unsigned long)(millis() - sendingFileDataTime) > sendingFileDataDelay)) {
    
    sendingFileDataTime = millis();

    int chk = sensorDHT.read11(pinSensor);

    logFile = SD.open(readFileName, FILE_READ);
      
    while (logFile.available()) {
      Character = logFile.read();

      messageBuffer += Character;
      
      if (Character == '\n') {
        Serial.print(messageBuffer);
        serialBT.print("?" + messageBuffer + ";;;");
        messageBuffer = "";
      }
    }
    sendFileData = false;
    logFile.close();

    delay(10);
    serialBT.print(endData);
  }
  
}


//------------------------------------------------------------------------

void sendSensorReadingToPhone() {
  if (sendSensorReading && ((unsigned long)(millis() - sensorReadingBTTime) > sensorReadingBTDelay)) {
  
    sensorReadingBTTime = millis();    
    
    int chk = sensorDHT.read11(pinSensor);
  
    //verifies if there was an error in the reading
    
    switch (chk)
    {
    case DHTLIB_OK:
        Serial.print(F("OK,\t"));
        break;
    case DHTLIB_ERROR_CHECKSUM:
        Serial.print(F("Checksum,\t"));
        break;
    case DHTLIB_ERROR_TIMEOUT:
        Serial.print(F("Time out,\t"));
        break;
    case DHTLIB_ERROR_CONNECT:
        Serial.print(F("Connect,\t"));
        break;
    case DHTLIB_ERROR_ACK_L:
        Serial.print(F("Ack Low,\t"));
        break;
    case DHTLIB_ERROR_ACK_H:
        Serial.print(F("Ack High,\t"));
        break;
    default:
        Serial.print(F("Unknown,\t"));
        break;
    }

    //Debug
    Serial.print(F(",\t"));
    Serial.print(sensorDHT.humidity, 1);
    Serial.print(F(",\t"));
    Serial.println(sensorDHT.temperature, 1);
  
    
    serialBT.print("?");
    serialBT.print(sensorDHT.temperature, 1);
    serialBT.print("&");
    serialBT.print(sensorDHT.humidity, 1);
    serialBT.print(";;;");
  }
}


//----------------------------------------------------------------------------------------

void checkUnitsButton() {
  byte unitsButtonCurrentState;
  static byte unitsButtonLastState = HIGH;


  unitsButtonCurrentState = digitalRead(pinUnitsButton);

  if (((unitsButtonCurrentState == LOW) && (unitsButtonLastState == HIGH))  && ((unsigned long)(millis() - unitsButtonTime) > unitsButtonDelay)){
    unitsButtonTime = millis();
    unitsCounter = (unitsCounter + 1)%3;
    
  if(__brkval == 0x00) Serial.println(SP - (int)&__bss_end);
  else Serial.println(SP - (int)__brkval);
  }
  unitsButtonLastState = unitsButtonCurrentState;

}



//-----------------------------------------------------------------------------------------------


void sensorReadingToDisplay() {
  float temperatureReading;
  
  if ((unsigned long)(millis() - sensorReadingToDisplayTime) > sensorReadingToDisplayDelay) {

    sensorReadingToDisplayTime = millis();

    int chk = sensorDHT.read11(pinSensor);
    
    lcd.clear();
    
    lcd.print(F("Temp("));
    switch (unitsCounter)
    {
      case 0:
        lcd.write(byte(223));
        lcd.print(F("C):"));
        temperatureReading = sensorDHT.temperature;
        break;
        
      case 1:
        lcd.write(byte(223));
        lcd.print(F("F):"));
        temperatureReading = ((sensorDHT.temperature*1.8) + 32);
        break;
       
      case 2:
        lcd.print(F("K):"));
        temperatureReading = (sensorDHT.temperature + 273.15);
        break;     
    }
    
    lcd.print(temperatureReading, 1);
    lcd.setCursor(0,1);
    lcd.print(F("Humid(%):"));
    lcd.print(sensorDHT.humidity, 1);  
  }




  
}



//-------------------------------------------------------------------------------------------



String readVarsFile (byte listIndex) {
  
  char Character;
  String messageBuffer;
  //String messageList[3];
  byte messageCounter = 0;
  
  if (SD.exists("VARS.txt")) {
    logFile = SD.open("VARS.txt", FILE_READ);
    if (logFile) {
      //Serial.println(F("OPEN"));
      while (logFile.available()) {
        Character = logFile.read();
        if (Character == ',') {
          if(messageCounter == listIndex) {
            break;
          }
          else {
            messageCounter = (messageCounter+1)%3;
            messageBuffer = "";  
          }    
        }
        else if (Character == '!') {
          break;
        }
        else {
          messageBuffer += Character;
        }
      }
    } else {Serial.println(F("Error opening"));}
    logFile.close();
  }

  if(__brkval == 0x00) Serial.println(SP - (int)&__bss_end);
  else Serial.println(SP - (int)__brkval);

  Serial.println(messageBuffer);
  return messageBuffer;

}



unsigned long getLong (String text) {
  unsigned long numero = 0;
  byte textCursor = 0;
  
  while ((text[textCursor] >= '0') && (text[textCursor] <= '9') && (textCursor < text.length())) {
    numero = (numero*10) + (text[textCursor] - 48);
    textCursor++;
  }
  return numero;
}
  
  
